// Sh-1.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include<math.h>
#include<cmath>
using namespace std;

void op(int b)
{
	if(b==1)
		cout<< "Задание 1: Вычислить частичную сумму ряда S(x). Найти абсолютную погрешность полученного результата." << "\n" << "Сравнить погрешность с абсолютной величиной последнего слагаемого." << "\n" << "\n";
	if(b==2)
		cout<< "Задание 2: Вычислить сумму слагаемых больших E. Подсчитать кол-во таких слагаемых." << "\n" << "Выполнить суммирование для двух значений E, отличающихся на порядок(в 10 раз)" << "\n" << "\n";
}

long double SumN(long double x, int N, int e)
{
	long double Sum, el;
	Sum = 0;
	for (int c = 1; c <= N; c++)
	{
		el = (pow(-1,c+1)*pow(x-1, c))/ c;
		if (e == 1)
		{
			cout << c << ") " << el << "\n";
		}
		Sum = Sum + el;
	}
	return Sum;
}

long double NTerm(long double x, int N)
{
	long double el;
	el= (pow(-1, N + 1) * pow(x - 1, N)) / N;
	return el;
}

long double SumE(long double x, long double E, int e)
{
	long double Sum, el;
	Sum = 0;
	int c = 1;
	bool i;
	i = true;
	el = 0;
	while (i == true)
	{
		Sum = Sum + el;
		el = (pow(-1, c + 1) * pow(x - 1, c)) / c;
		if (e == 1)
		{
			cout << c << ") сумма " << Sum << " слагаемое " << el << "\n";
		}
		if (fabs(el) <= fabs(E))
			i = false;
		c = c + 1;
	}
	return Sum;
}

int CountN(long double x, long double E)
{
	long double Sum, el;
	Sum = 0;
	int c = 1;
	bool i;
	i = true;
	el = 0;
	while (i == true)
	{
		Sum = Sum + el;
		el = (pow(-1, c + 1) * pow(x - 1, c)) / c;
		if (fabs(el) <= fabs(E))
			i = false;
		c = c + 1;
	}
	return c;
}

int main()
{
	setlocale(LC_ALL, "Russian");
	while (1)
	{
		int a;
		cout << "Выберите действие: " << "\n" << "любое число - выполнить задания" << "\n" << "0 - выход" << "\n";
		cin >> a;
		cout << "\n";
		if (a == 0)
			break;
		else
		{
			while (1)
			{
				cout << "Вариант 23. Функция равна ln(x), 0<x<=2" << "\n" << "\n";
				int b;
				cout << "Выберите задание: " << "\n";
				cout << "1 - задание 1" << "\n";
				cout << "2 - задание 2" << "\n";
				cout << "0 - выход в основное меню" << "\n";
				cin >> b;
				cout << "\n";
				switch (b)
				{
				case 1: {
						int d, e;
						cout << "Вывести условие задания 1?" << "\n";
						cout << "1 - да" << "\n";
						cout << "любое остальное число - нет" << "\n";
						cin >> d;
						cout << "\n";
						if (d == 1)
						{
							op(b);
						}
						int N;
						long double x;
						cout << "Введите значение x" << "\n";
						cout << "x=(0,2]" << "\n";
						cin >> x;
						cout << "\n";
						if (x <= 0 || x > 2)
						{
							cout << "Введён некорректный x!" << "\n";
							break;
						}
						cout << "Введите значение N" << "\n";
						cout << "N должно быть больше 0" << "\n";
						cin >> N;
						cout << "\n";
						if (N <= 0)
						{
							cout << "Введён некорректный N!" << "\n";
							break;
						}
						cout << "Вывести промежуточные значения слагаемых при выполнении?" << "\n";
						cout << "1 - да" << "\n";
						cout << "любое остальное число - нет" << "\n";
						cin >> e;
						cout << "\n";
						long double line;
						line = SumN(x, N, e);
						cout << "\n" << "Частичная сумма ряда - " << line << "\n"<<"\n";
						long double func, com;
						func = log(x);
						cout << "Значение заданной функции равно " << func << "\n"<<"\n";
						com = fabs(line - func);
						cout << "Абсолютная погрешность равна " << com << "\n"<<"\n";
						cout << "Сравнение с последним слагаемым ряда: ";
						if (NTerm(x, N) > com)
							cout << "последнее слагаемое > погрешности" << "\n" << "\n";
						else
							if (NTerm(x, N) < com)
								cout << "Последнее слагаемое < погрешности" << "\n" << "\n";
							else
								cout << "Последнее слагаемое = погрешности" << "\n" << "\n";
						break;
					break;
				}
				case 2: {
					int d, e;
					cout << "Вывести условие задания 2?" << "\n";
					cout << "1 - да" << "\n";
					cout << "любое остальное число - нет" << "\n";
					cin >> d;
					cout << "\n";
					if (d == 1)
					{
						op(b);
					}
					long double x, E1, E2, E11,E22;
					cout << "Введите значение x" << "\n";
					cout << "x=(0,2]" << "\n";
					cin >> x;
					cout << "\n";
					if (x <= 0 || x > 2)
					{
						cout << "Ввёден некорректный x!" << "\n";
						break;
					}
					cout << "Введите первое значение E" << "\n";
					cin >> E1;
					cout << "\n";
					cout << "Введите второе значение E" << "\n";
					cout << "Первое и второе значения E должны отличаться на порядок" << "\n";
					cin >> E2;
					cout << "\n";
					if (E1 * 10 == E2 || E2 * 10 == E1)
					{
						cout << "Вывести промежуточные значения слагаемых при выполнении?" << "\n";
						cout << "1 - да" << "\n";
						cout << "любое остальное число - нет" << "\n";
						cin >> e;
						cout << "\n";
						cout << "Выполнение задания для первого Е: " << "\n"<<"\n";
						E11 = SumE(x, E1, e);
						if (e == 1)
							cout << "\n";
						cout<< "Сумма элементов, больших E равна " << E11 << "\n";
						cout << "Кол-во слагаемых, больших E - " << CountN(x, E1) << "\n" << "\n";
						cout << "Выполнение задания для второго Е: " << "\n"<<"\n";
						E22 = SumE(x, E2, e);
						if (e == 1)
							cout << "\n";
						cout << "Сумма элементов, больших E равна " << E22 << "\n";
						cout << "Кол-во слагаемых, больших Е равно - " << CountN(x, E2) << "\n" << "\n";
					}
					else
					{
						cout << "Значения E не отличаются на порядок!(в 10 раз)" << "\n"<<"\n";
						break;
					}
					break;
				}
				case 0: {
					break;
				}
				default: {
					cout << "Введён несуществующий номер задания!" << "\n";
				}
				}
				break;
			}
		}
	}
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
